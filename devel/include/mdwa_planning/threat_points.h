// Generated by gencpp from file mdwa_planning/threat_points.msg
// DO NOT EDIT!


#ifndef MDWA_PLANNING_MESSAGE_THREAT_POINTS_H
#define MDWA_PLANNING_MESSAGE_THREAT_POINTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace mdwa_planning
{
template <class ContainerAllocator>
struct threat_points_
{
  typedef threat_points_<ContainerAllocator> Type;

  threat_points_()
    : impact_points()
    , impact_times(0.0)  {
    }
  threat_points_(const ContainerAllocator& _alloc)
    : impact_points(_alloc)
    , impact_times(0.0)  {
  (void)_alloc;
    }



   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _impact_points_type;
  _impact_points_type impact_points;

   typedef float _impact_times_type;
  _impact_times_type impact_times;





  typedef boost::shared_ptr< ::mdwa_planning::threat_points_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mdwa_planning::threat_points_<ContainerAllocator> const> ConstPtr;

}; // struct threat_points_

typedef ::mdwa_planning::threat_points_<std::allocator<void> > threat_points;

typedef boost::shared_ptr< ::mdwa_planning::threat_points > threat_pointsPtr;
typedef boost::shared_ptr< ::mdwa_planning::threat_points const> threat_pointsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mdwa_planning::threat_points_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mdwa_planning::threat_points_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mdwa_planning::threat_points_<ContainerAllocator1> & lhs, const ::mdwa_planning::threat_points_<ContainerAllocator2> & rhs)
{
  return lhs.impact_points == rhs.impact_points &&
    lhs.impact_times == rhs.impact_times;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mdwa_planning::threat_points_<ContainerAllocator1> & lhs, const ::mdwa_planning::threat_points_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mdwa_planning

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mdwa_planning::threat_points_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mdwa_planning::threat_points_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mdwa_planning::threat_points_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mdwa_planning::threat_points_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mdwa_planning::threat_points_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mdwa_planning::threat_points_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mdwa_planning::threat_points_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3d5e7da5fa6baa9aa54f04458b40de75";
  }

  static const char* value(const ::mdwa_planning::threat_points_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3d5e7da5fa6baa9aULL;
  static const uint64_t static_value2 = 0xa54f04458b40de75ULL;
};

template<class ContainerAllocator>
struct DataType< ::mdwa_planning::threat_points_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mdwa_planning/threat_points";
  }

  static const char* value(const ::mdwa_planning::threat_points_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mdwa_planning::threat_points_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point[] impact_points\n"
"float32 impact_times\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::mdwa_planning::threat_points_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mdwa_planning::threat_points_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.impact_points);
      stream.next(m.impact_times);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct threat_points_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mdwa_planning::threat_points_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mdwa_planning::threat_points_<ContainerAllocator>& v)
  {
    s << indent << "impact_points[]" << std::endl;
    for (size_t i = 0; i < v.impact_points.size(); ++i)
    {
      s << indent << "  impact_points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.impact_points[i]);
    }
    s << indent << "impact_times: ";
    Printer<float>::stream(s, indent + "  ", v.impact_times);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MDWA_PLANNING_MESSAGE_THREAT_POINTS_H
