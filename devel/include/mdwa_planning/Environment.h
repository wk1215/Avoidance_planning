// Generated by gencpp from file mdwa_planning/Environment.msg
// DO NOT EDIT!


#ifndef MDWA_PLANNING_MESSAGE_ENVIRONMENT_H
#define MDWA_PLANNING_MESSAGE_ENVIRONMENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mdwa_planning/Barrier.h>
#include <mdwa_planning/Dy_Barrier.h>

namespace mdwa_planning
{
template <class ContainerAllocator>
struct Environment_
{
  typedef Environment_<ContainerAllocator> Type;

  Environment_()
    : barrier()
    , dy_obs()
    , obs_size(0.0)  {
    }
  Environment_(const ContainerAllocator& _alloc)
    : barrier(_alloc)
    , dy_obs(_alloc)
    , obs_size(0.0)  {
  (void)_alloc;
    }



   typedef std::vector< ::mdwa_planning::Barrier_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::mdwa_planning::Barrier_<ContainerAllocator> >::other >  _barrier_type;
  _barrier_type barrier;

   typedef std::vector< ::mdwa_planning::Dy_Barrier_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::mdwa_planning::Dy_Barrier_<ContainerAllocator> >::other >  _dy_obs_type;
  _dy_obs_type dy_obs;

   typedef float _obs_size_type;
  _obs_size_type obs_size;





  typedef boost::shared_ptr< ::mdwa_planning::Environment_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mdwa_planning::Environment_<ContainerAllocator> const> ConstPtr;

}; // struct Environment_

typedef ::mdwa_planning::Environment_<std::allocator<void> > Environment;

typedef boost::shared_ptr< ::mdwa_planning::Environment > EnvironmentPtr;
typedef boost::shared_ptr< ::mdwa_planning::Environment const> EnvironmentConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mdwa_planning::Environment_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mdwa_planning::Environment_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mdwa_planning::Environment_<ContainerAllocator1> & lhs, const ::mdwa_planning::Environment_<ContainerAllocator2> & rhs)
{
  return lhs.barrier == rhs.barrier &&
    lhs.dy_obs == rhs.dy_obs &&
    lhs.obs_size == rhs.obs_size;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mdwa_planning::Environment_<ContainerAllocator1> & lhs, const ::mdwa_planning::Environment_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mdwa_planning

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mdwa_planning::Environment_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mdwa_planning::Environment_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mdwa_planning::Environment_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mdwa_planning::Environment_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mdwa_planning::Environment_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mdwa_planning::Environment_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mdwa_planning::Environment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "366bf54a33961c132c7cb18ef82cb2bb";
  }

  static const char* value(const ::mdwa_planning::Environment_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x366bf54a33961c13ULL;
  static const uint64_t static_value2 = 0x2c7cb18ef82cb2bbULL;
};

template<class ContainerAllocator>
struct DataType< ::mdwa_planning::Environment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mdwa_planning/Environment";
  }

  static const char* value(const ::mdwa_planning::Environment_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mdwa_planning::Environment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mdwa_planning/Barrier[] barrier\n"
"mdwa_planning/Dy_Barrier[] dy_obs\n"
"float32 obs_size\n"
"\n"
"================================================================================\n"
"MSG: mdwa_planning/Barrier\n"
"float64 x\n"
"float64 y\n"
"\n"
"================================================================================\n"
"MSG: mdwa_planning/Dy_Barrier\n"
"float64 x\n"
"float64 y\n"
"float64 vx\n"
"float64 vy\n"
;
  }

  static const char* value(const ::mdwa_planning::Environment_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mdwa_planning::Environment_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.barrier);
      stream.next(m.dy_obs);
      stream.next(m.obs_size);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Environment_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mdwa_planning::Environment_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mdwa_planning::Environment_<ContainerAllocator>& v)
  {
    s << indent << "barrier[]" << std::endl;
    for (size_t i = 0; i < v.barrier.size(); ++i)
    {
      s << indent << "  barrier[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::mdwa_planning::Barrier_<ContainerAllocator> >::stream(s, indent + "    ", v.barrier[i]);
    }
    s << indent << "dy_obs[]" << std::endl;
    for (size_t i = 0; i < v.dy_obs.size(); ++i)
    {
      s << indent << "  dy_obs[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::mdwa_planning::Dy_Barrier_<ContainerAllocator> >::stream(s, indent + "    ", v.dy_obs[i]);
    }
    s << indent << "obs_size: ";
    Printer<float>::stream(s, indent + "  ", v.obs_size);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MDWA_PLANNING_MESSAGE_ENVIRONMENT_H
