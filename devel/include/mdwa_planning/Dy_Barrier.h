// Generated by gencpp from file mdwa_planning/Dy_Barrier.msg
// DO NOT EDIT!


#ifndef MDWA_PLANNING_MESSAGE_DY_BARRIER_H
#define MDWA_PLANNING_MESSAGE_DY_BARRIER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mdwa_planning
{
template <class ContainerAllocator>
struct Dy_Barrier_
{
  typedef Dy_Barrier_<ContainerAllocator> Type;

  Dy_Barrier_()
    : x(0.0)
    , y(0.0)
    , vx(0.0)
    , vy(0.0)  {
    }
  Dy_Barrier_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , vx(0.0)
    , vy(0.0)  {
  (void)_alloc;
    }



   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _vx_type;
  _vx_type vx;

   typedef double _vy_type;
  _vy_type vy;





  typedef boost::shared_ptr< ::mdwa_planning::Dy_Barrier_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mdwa_planning::Dy_Barrier_<ContainerAllocator> const> ConstPtr;

}; // struct Dy_Barrier_

typedef ::mdwa_planning::Dy_Barrier_<std::allocator<void> > Dy_Barrier;

typedef boost::shared_ptr< ::mdwa_planning::Dy_Barrier > Dy_BarrierPtr;
typedef boost::shared_ptr< ::mdwa_planning::Dy_Barrier const> Dy_BarrierConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mdwa_planning::Dy_Barrier_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mdwa_planning::Dy_Barrier_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mdwa_planning::Dy_Barrier_<ContainerAllocator1> & lhs, const ::mdwa_planning::Dy_Barrier_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.vx == rhs.vx &&
    lhs.vy == rhs.vy;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mdwa_planning::Dy_Barrier_<ContainerAllocator1> & lhs, const ::mdwa_planning::Dy_Barrier_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mdwa_planning

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mdwa_planning::Dy_Barrier_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mdwa_planning::Dy_Barrier_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mdwa_planning::Dy_Barrier_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mdwa_planning::Dy_Barrier_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mdwa_planning::Dy_Barrier_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mdwa_planning::Dy_Barrier_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mdwa_planning::Dy_Barrier_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d181fc9f1eeb211fc87744356ce417a1";
  }

  static const char* value(const ::mdwa_planning::Dy_Barrier_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd181fc9f1eeb211fULL;
  static const uint64_t static_value2 = 0xc87744356ce417a1ULL;
};

template<class ContainerAllocator>
struct DataType< ::mdwa_planning::Dy_Barrier_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mdwa_planning/Dy_Barrier";
  }

  static const char* value(const ::mdwa_planning::Dy_Barrier_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mdwa_planning::Dy_Barrier_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x\n"
"float64 y\n"
"float64 vx\n"
"float64 vy\n"
;
  }

  static const char* value(const ::mdwa_planning::Dy_Barrier_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mdwa_planning::Dy_Barrier_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.vx);
      stream.next(m.vy);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Dy_Barrier_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mdwa_planning::Dy_Barrier_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mdwa_planning::Dy_Barrier_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "vx: ";
    Printer<double>::stream(s, indent + "  ", v.vx);
    s << indent << "vy: ";
    Printer<double>::stream(s, indent + "  ", v.vy);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MDWA_PLANNING_MESSAGE_DY_BARRIER_H
